"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@typescript-eslint/utils");
const helpers_1 = require("../helpers");
const rule = {
    meta: {
        docs: {
            description: "doesn't allow functions or member expressions in templates",
            recommended: 'error',
        },
        messages: {
            default: 'Should be ${variable}, not ${object.property} or ${my_function()}',
        },
        schema: [
            {
                type: 'object',
                properties: {},
                additionalProperties: false,
            },
        ],
        type: 'problem',
    },
    defaultOptions: [],
    create: function (context) {
        return {
            'TemplateLiteral:exit'(node) {
                const noneIdentifierExpressions = node.expressions
                    ? node.expressions.filter((expression) => {
                        return expression.type !== utils_1.TSESTree.AST_NODE_TYPES.Identifier;
                    })
                    : [];
                const taggedTemplate = (0, helpers_1.getNearestAncestor)(node, 'TaggedTemplateExpression');
                if (noneIdentifierExpressions.length > 0 &&
                    taggedTemplate &&
                    (0, helpers_1.isTTaggedTemplateExpression)(taggedTemplate)) {
                    context.report({
                        node: node,
                        messageId: 'default',
                    });
                }
                return;
            },
        };
    },
};
exports.default = rule;
//# sourceMappingURL=no-expression-in-message.js.map