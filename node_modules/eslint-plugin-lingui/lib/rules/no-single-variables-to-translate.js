"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@typescript-eslint/utils");
const helpers_1 = require("../helpers");
const rule = {
    meta: {
        docs: {
            description: "doesn't allow single variables without text to translate",
            recommended: 'error',
        },
        messages: {
            asJsx: "You couldn't translate just a variable, remove Trans or add some text inside",
            asFunction: "You couldn't translate just a variable, remove t`` or add some text inside",
        },
        schema: [
            {
                type: 'object',
                properties: {},
                additionalProperties: false,
            },
        ],
        type: 'problem',
    },
    defaultOptions: [],
    create: function (context) {
        const hasSomeJSXTextWithContent = (nodes) => {
            return nodes.some((jsxChild) => {
                switch (jsxChild.type) {
                    case utils_1.TSESTree.AST_NODE_TYPES.JSXText:
                        return jsxChild.value.trim().length > 0;
                    case utils_1.TSESTree.AST_NODE_TYPES.JSXElement:
                    case utils_1.TSESTree.AST_NODE_TYPES.JSXFragment:
                        return hasSomeJSXTextWithContent(jsxChild.children);
                    default:
                        return false;
                }
            });
        };
        return {
            JSXElement(node) {
                var _a;
                const identifierName = (0, helpers_1.getIdentifierName)((_a = node === null || node === void 0 ? void 0 : node.openingElement) === null || _a === void 0 ? void 0 : _a.name);
                if (identifierName === 'Trans') {
                    const isSomeJSXTextWithContent = node && hasSomeJSXTextWithContent(node.children);
                    if (!isSomeJSXTextWithContent) {
                        context.report({
                            node,
                            messageId: 'asJsx',
                        });
                    }
                }
                return;
            },
            'TemplateLiteral:exit'(node) {
                const taggedTemplate = (0, helpers_1.getNearestAncestor)(node, 'TaggedTemplateExpression');
                const quasisValue = (0, helpers_1.getQuasisValue)(node);
                if (taggedTemplate &&
                    (0, helpers_1.isTTaggedTemplateExpression)(taggedTemplate) &&
                    (!quasisValue || !quasisValue.length)) {
                    context.report({
                        node,
                        messageId: 'asFunction',
                    });
                }
                return;
            },
        };
    },
};
exports.default = rule;
//# sourceMappingURL=no-single-variables-to-translate.js.map