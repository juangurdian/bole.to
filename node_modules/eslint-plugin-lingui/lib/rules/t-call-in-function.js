"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@typescript-eslint/utils");
const helpers_1 = require("../helpers");
const rule = {
    meta: {
        docs: {
            description: 'allow t call only inside functions',
            recommended: 'error',
        },
        messages: {
            default: 't`` and t() call should be inside function',
        },
        schema: [
            {
                type: 'object',
                properties: {},
                additionalProperties: false,
            },
        ],
        type: 'problem',
    },
    defaultOptions: [],
    create: (context) => {
        const visited = new WeakSet();
        const handler = (node) => {
            if (!(0, helpers_1.isTTaggedTemplateExpression)(node)) {
                return;
            }
            visited.add(node);
            return;
        };
        return {
            ['FunctionDeclaration TaggedTemplateExpression'](node) {
                handler(node);
            },
            ['FunctionExpression TaggedTemplateExpression'](node) {
                handler(node);
            },
            ['ArrowFunctionExpression TaggedTemplateExpression'](node) {
                handler(node);
            },
            ['ClassDeclaration TaggedTemplateExpression'](node) {
                handler(node);
            },
            ['CallExpression:exit'](node) {
                const scope = context.getScope();
                if (scope.type === 'module' &&
                    node.callee.type === utils_1.TSESTree.AST_NODE_TYPES.Identifier &&
                    node.callee.name === 't') {
                    context.report({
                        node,
                        messageId: 'default',
                    });
                }
            },
            ['TaggedTemplateExpression:exit'](node) {
                if (visited.has(node))
                    return;
                if (!(0, helpers_1.isTTaggedTemplateExpression)(node)) {
                    return;
                }
                context.report({
                    node,
                    messageId: 'default',
                });
            },
        };
    },
};
exports.default = rule;
//# sourceMappingURL=t-call-in-function.js.map